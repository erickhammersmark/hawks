#!/usr/bin/env python3

import argparse
import os
import time
from hawks import Hawks
from hawks_api import run_api
from subprocess import Popen, PIPE


def parse_args():
  parser = argparse.ArgumentParser()
  parser.add_argument("--text", default="hello")
  parser.add_argument("--bgcolor", default="black", help="Default is black")
  parser.add_argument("--outercolor", default="black", help="Text outline color, default is black")
  parser.add_argument("--innercolor", default="white", help="Text inner color, default is white")
  parser.add_argument("--cols", type=int, default=32, help="Image width, default 32")
  parser.add_argument("--rows", type=int, default=32, help="Image height, default 32")
  parser.add_argument("--margin", type=int, default=2, help="Margin of bgcolor around text")
  parser.add_argument("--thickness", type=int, default=1,
                      help="Thickness of outercolor border around text")
  parser.add_argument("--decompose", action="store_true", default=False,
                      help="Set this if you have two 32x64 panels chained as 32x128 but want them "
                      "to function as 64x64")
  parser.add_argument("--font", default="FreeSansBold", help="Truetype font, default is FreeSansBold")
  parser.add_argument("--textsize", default=27, type=int)
  parser.add_argument("--x", type=int, default=0)
  parser.add_argument("--y", type=int, default=0)
  parser.add_argument("--preset", default="none", choices=Hawks.PRESETS.keys())
  parser.add_argument("--port", type=int, default=1212, help="API listener port, default 1212")
  parser.add_argument("--filename", default="none", help="PNG, JPG, or GIF file to display")
  parser.add_argument("--url", default="", help="Load image from URL")
  parser.add_argument("--urls_file", default="", help="File containing URLs to show in web UI (one URL per line)")
  parser.add_argument("--debug", action="store_true", default=False)
  parser.add_argument("--brightness", default=192, type=int, help="min 0, max 255, default 192")
  parser.add_argument("--disc", action="store_true", default=False,
                      help="Display is an Adafruit Dotstar disc")
  parser.add_argument("--mock", action="store_true", default=False, help="Display is mock rgbmatrix")
  parser.add_argument("--mode", default="text",
                      help="Mode of operation.  Valid values are 'text', 'file', 'url', 'disc_animations', and 'network_weather'")
  parser.add_argument("--fontdir", default="/usr/share/fonts/truetype/freefont", help="TrueType font directory (only for webui)")
  parser.add_argument("--noapi", action="store_true", default=False, help="Do not run the API service, just do what the CLI says")
  parser.add_argument("--gif_override_duration_zero", action="store_true", default=False, help="Run gifs with duration 0 at pre-duration-standard timing")
  parser.add_argument("--filter", default="none", help="Filter to apply to image")
  parser.add_argument("--animation", default="none")
  parser.add_argument("--showip", action="store_true", default=False, help="show the hosts's IP address when the sign first starts")
  parser.add_argument("--fps", default=16, help="fps")
  parser.add_argument("--bgbrightness", default=0, help="background for rainbow background")

  autosize = parser.add_mutually_exclusive_group(required=False)
  autosize.add_argument("--autosize", dest="autosize", action="store_true")
  autosize.add_argument("--no-autosize", dest="autosize", action="store_false")
  parser.set_defaults(autosize=True)

  return parser.parse_args()
  return args

def whatismyip():
  proc = Popen("ip addr show dev $(netstat -nr |grep '^0.0.0.0 ' |awk '{print $NF}') |awk '/inet / {print $2}' |sed 's,/.*,,'", shell=True, stdout=PIPE, stderr=PIPE)
  stdout, stderr = proc.communicate()
  if proc.returncode == 0 and stdout:
    return str(stdout, encoding='utf-8').strip()
  return None 

def splitip(ip):
  octets = ip.split(".")
  return "{}.{}.\n{}.{}".format(*octets)

def main():
  args = parse_args()
  hawks_args = dict(args._get_kwargs())
  hawks_args.pop("port")
  hawks = Hawks(**hawks_args)
  myip = whatismyip()
  if args.showip:
    hawks.settings.set("text", splitip(myip))
  hawks.show()
  hawks.settings.choices["font"] = [x.strip(".ttf") for x in os.listdir("/usr/share/fonts/truetype/freefont")]
  if args.noapi:
    while True:
      time.sleep(1000)
  else:
    print("Web UI at http://{}:{}/".format(myip, args.port))
    run_api(myip, args.port, hawks)


if __name__ == "__main__":
    main()
