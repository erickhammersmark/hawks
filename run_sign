#!/usr/bin/env python3

import argparse
import os
import time
from hawks import Hawks, HawksSettings
from hawks_api import run_api
from subprocess import Popen, PIPE

hawks_settings = HawksSettings()

def add_arg(parser, name, **kwargs):
    if "help" not in kwargs:
        kwargs["help"] = hawks_settings.helptext.get(name.replace("--",""), "")
    parser.add_argument(name, **kwargs)

def parse_args():
  parser = argparse.ArgumentParser()
  add_arg(parser, "--text", default="hello")
  add_arg(parser, "--bgcolor", default="black")
  add_arg(parser, "--outercolor", default="black")
  add_arg(parser, "--innercolor", default="white")
  add_arg(parser, "--cols", type=int, default=32)
  add_arg(parser, "--rows", type=int, default=32)
  add_arg(parser, "--p_cols", type=int, default=0)
  add_arg(parser, "--p_rows", type=int, default=0)
  add_arg(parser, "--text_margin", type=int, default=2)
  add_arg(parser, "--thickness", type=int, default=1)
  add_arg(parser, "--decompose", action="store_true", default=False)
  add_arg(parser, "--font", default="FreeSansBold")
  add_arg(parser, "--textsize", default=27, type=int)
  add_arg(parser, "--x", type=int, default=0)
  add_arg(parser, "--y", type=int, default=0)
  add_arg(parser, "--preset", default="none", choices=Hawks.PRESETS.keys())
  add_arg(parser, "--port", type=int, default=1212)
  add_arg(parser, "--filename", default="none")
  add_arg(parser, "--url", default="")
  add_arg(parser, "--urls_file", default="")
  add_arg(parser, "--debug", action="store_true", default=False)
  add_arg(parser, "--brightness", default=192, type=int)
  add_arg(parser, "--disc", action="store_true", default=False)
  add_arg(parser, "--mock", action="store_true", default=False)
  add_arg(parser, "--nodisplay", action="store_true", default=False)
  add_arg(parser, "--row_address_type", default=0, type=int)
  add_arg(parser, "--mode", default="text")
  add_arg(parser, "--fontdir", default="/usr/share/fonts/truetype/freefont")
  add_arg(parser, "--noapi", action="store_true", default=False)
  add_arg(parser, "--no_gif_override_duration_zero", action="store_true", default=False)
  add_arg(parser, "--filter", default="none")
  add_arg(parser, "--animation", default="none")
  add_arg(parser, "--showip", action="store_true", default=False)
  add_arg(parser, "--fps", default=16)
  add_arg(parser, "--underscan", default=0, type=int)
  add_arg(parser, "--noloop", action="store_true", default=False)
  add_arg(parser, "--slideshow_directory", default="img")
  add_arg(parser, "--slideshow_hold_sec", default="10.0", type=float)
  add_arg(parser, "--transition", default="none")
  add_arg(parser, "--transition_duration_ms", default=250, type=int)
  add_arg(parser, "--transition_frames_max", default=18, type=int)
  add_arg(parser, "--no_webui_one_mode_only", default=False, action="store_true")

  autosize = parser.add_mutually_exclusive_group(required=False)
  autosize.add_argument("--autosize", dest="autosize", action="store_true")
  autosize.add_argument("--no-autosize", dest="autosize", action="store_false")
  parser.set_defaults(autosize=True)

  args = parser.parse_args()

  args.p_cols = args.p_cols or args.cols
  args.p_rows = args.p_rows or args.rows

  return args

def whatismyip():
  proc = Popen("ip addr show dev $(netstat -nr |grep '^0.0.0.0 ' |awk '{print $NF}') |awk '/inet / {print $2}' |sed 's,/.*,,'", shell=True, stdout=PIPE, stderr=PIPE)
  stdout, stderr = proc.communicate()
  if proc.returncode == 0 and stdout:
    return str(stdout, encoding='utf-8').strip()
  return ""

def splitip(ip):
  octets = ip.split(".")
  return "{}.{}.\n{}.{}".format(*octets)

def main():
  args = parse_args()
  hawks_args = dict(args._get_kwargs())
  hawks_args.pop("port")
  hawks = Hawks(**hawks_args)
  myip = whatismyip()
  if myip and args.showip:
    hawks.settings.set("text", splitip(myip))
  hawks.show()
  hawks.settings.choices["font"] = [x.strip(".ttf") for x in os.listdir("/usr/share/fonts/truetype/freefont")]
  if args.noapi:
    while True:
      time.sleep(1000)
  else:
    print("Web UI at http://{}:{}/".format(myip or "0.0.0.0", args.port))
    run_api(myip, args.port, hawks)


if __name__ == "__main__":
    main()
